// <auto-generated />
using System;
using KarmaBot;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KarmaBot.Migrations
{
    [DbContext(typeof(KarmaContext))]
    partial class KarmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KarmaBot.Models.Karma", b =>
                {
                    b.Property<long>("KarmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("HighestKarma")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("HighestKarmaDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("KarmaCount")
                        .HasColumnType("bigint");

                    b.Property<long>("LowestKarma")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LowestKarmaDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NegativeKarmaGiven")
                        .HasColumnType("bigint");

                    b.Property<long>("PositiveKarmaGiven")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("KarmaId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Karma");
                });

            modelBuilder.Entity("KarmaBot.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsNonUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlackUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KarmaBot.Models.Karma", b =>
                {
                    b.HasOne("KarmaBot.Models.User", "User")
                        .WithOne("Karma")
                        .HasForeignKey("KarmaBot.Models.Karma", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KarmaBot.Models.User", b =>
                {
                    b.Navigation("Karma");
                });
#pragma warning restore 612, 618
        }
    }
}
